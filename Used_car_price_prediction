{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":76728,"databundleVersionId":9057646,"sourceType":"competition"}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-19T09:06:13.923699Z","iopub.execute_input":"2024-09-19T09:06:13.924000Z","iopub.status.idle":"2024-09-19T09:06:14.312248Z","shell.execute_reply.started":"2024-09-19T09:06:13.923967Z","shell.execute_reply":"2024-09-19T09:06:14.311184Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e9/sample_submission.csv\n/kaggle/input/playground-series-s4e9/train.csv\n/kaggle/input/playground-series-s4e9/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom cuml.ensemble import RandomForestRegressor as cuml_RandomForestRegressor\nfrom sklearn.decomposition import PCA\nfrom scipy import stats","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:14.313982Z","iopub.execute_input":"2024-09-19T09:06:14.314798Z","iopub.status.idle":"2024-09-19T09:06:18.228231Z","shell.execute_reply.started":"2024-09-19T09:06:14.314746Z","shell.execute_reply":"2024-09-19T09:06:18.227440Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# Load the datasets\ntrain_df = pd.read_csv('/kaggle/input/playground-series-s4e9/train.csv')\ntest_df = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv')\nsample_submission_df = pd.read_csv('/kaggle/input/playground-series-s4e9/sample_submission.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:18.229273Z","iopub.execute_input":"2024-09-19T09:06:18.229759Z","iopub.status.idle":"2024-09-19T09:06:19.115992Z","shell.execute_reply.started":"2024-09-19T09:06:18.229726Z","shell.execute_reply":"2024-09-19T09:06:19.114988Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train_df","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:19.119096Z","iopub.execute_input":"2024-09-19T09:06:19.119859Z","iopub.status.idle":"2024-09-19T09:06:19.141062Z","shell.execute_reply.started":"2024-09-19T09:06:19.119823Z","shell.execute_reply":"2024-09-19T09:06:19.140203Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"            id          brand                     model  model_year  milage  \\\n0            0           MINI             Cooper S Base        2007  213000   \n1            1        Lincoln                     LS V8        2002  143250   \n2            2      Chevrolet         Silverado 2500 LT        2002  136731   \n3            3        Genesis          G90 5.0 Ultimate        2017   19500   \n4            4  Mercedes-Benz               Metris Base        2021    7388   \n...        ...            ...                       ...         ...     ...   \n188528  188528       Cadillac     Escalade ESV Platinum        2017   49000   \n188529  188529  Mercedes-Benz  AMG C 43 AMG C 43 4MATIC        2018   28600   \n188530  188530  Mercedes-Benz    AMG GLC 63 Base 4MATIC        2021   13650   \n188531  188531           Audi          S5 3.0T Prestige        2022   13895   \n188532  188532        Porsche                Macan Base        2016   59500   \n\n            fuel_type                                             engine  \\\n0            Gasoline       172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel   \n1            Gasoline       252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel   \n2       E85 Flex Fuel  320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...   \n3            Gasoline       420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel   \n4            Gasoline       208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n...               ...                                                ...   \n188528       Gasoline       420.0HP 6.2L 8 Cylinder Engine Gasoline Fuel   \n188529       Gasoline      385.0HP 3.0L V6 Cylinder Engine Gasoline Fuel   \n188530       Gasoline       469.0HP 4.0L 8 Cylinder Engine Gasoline Fuel   \n188531       Gasoline                                               3.0L   \n188532       Gasoline       252.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n\n                          transmission                    ext_col int_col  \\\n0                                  A/T                     Yellow    Gray   \n1                                  A/T                     Silver   Beige   \n2                                  A/T                       Blue    Gray   \n3       Transmission w/Dual Shift Mode                      Black   Black   \n4                          7-Speed A/T                      Black   Beige   \n...                                ...                        ...     ...   \n188528  Transmission w/Dual Shift Mode                      White   Beige   \n188529                     8-Speed A/T                      White   Black   \n188530                     7-Speed A/T                      White   Black   \n188531               1-Speed Automatic  Daytona Gray Pearl Effect   Black   \n188532  Transmission w/Dual Shift Mode                      White   Black   \n\n                                      accident clean_title  price  \n0                                None reported         Yes   4200  \n1       At least 1 accident or damage reported         Yes   4999  \n2                                None reported         Yes  13900  \n3                                None reported         Yes  45000  \n4                                None reported         Yes  97500  \n...                                        ...         ...    ...  \n188528                           None reported         Yes  27500  \n188529  At least 1 accident or damage reported         Yes  30000  \n188530                           None reported         Yes  86900  \n188531                           None reported         NaN  84900  \n188532                           None reported         Yes  28995  \n\n[188533 rows x 13 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>brand</th>\n      <th>model</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>fuel_type</th>\n      <th>engine</th>\n      <th>transmission</th>\n      <th>ext_col</th>\n      <th>int_col</th>\n      <th>accident</th>\n      <th>clean_title</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>MINI</td>\n      <td>Cooper S Base</td>\n      <td>2007</td>\n      <td>213000</td>\n      <td>Gasoline</td>\n      <td>172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Yellow</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>4200</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Lincoln</td>\n      <td>LS V8</td>\n      <td>2002</td>\n      <td>143250</td>\n      <td>Gasoline</td>\n      <td>252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Silver</td>\n      <td>Beige</td>\n      <td>At least 1 accident or damage reported</td>\n      <td>Yes</td>\n      <td>4999</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Chevrolet</td>\n      <td>Silverado 2500 LT</td>\n      <td>2002</td>\n      <td>136731</td>\n      <td>E85 Flex Fuel</td>\n      <td>320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...</td>\n      <td>A/T</td>\n      <td>Blue</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>13900</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Genesis</td>\n      <td>G90 5.0 Ultimate</td>\n      <td>2017</td>\n      <td>19500</td>\n      <td>Gasoline</td>\n      <td>420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>Transmission w/Dual Shift Mode</td>\n      <td>Black</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>45000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Mercedes-Benz</td>\n      <td>Metris Base</td>\n      <td>2021</td>\n      <td>7388</td>\n      <td>Gasoline</td>\n      <td>208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>7-Speed A/T</td>\n      <td>Black</td>\n      <td>Beige</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>97500</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>188528</th>\n      <td>188528</td>\n      <td>Cadillac</td>\n      <td>Escalade ESV Platinum</td>\n      <td>2017</td>\n      <td>49000</td>\n      <td>Gasoline</td>\n      <td>420.0HP 6.2L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>Transmission w/Dual Shift Mode</td>\n      <td>White</td>\n      <td>Beige</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>27500</td>\n    </tr>\n    <tr>\n      <th>188529</th>\n      <td>188529</td>\n      <td>Mercedes-Benz</td>\n      <td>AMG C 43 AMG C 43 4MATIC</td>\n      <td>2018</td>\n      <td>28600</td>\n      <td>Gasoline</td>\n      <td>385.0HP 3.0L V6 Cylinder Engine Gasoline Fuel</td>\n      <td>8-Speed A/T</td>\n      <td>White</td>\n      <td>Black</td>\n      <td>At least 1 accident or damage reported</td>\n      <td>Yes</td>\n      <td>30000</td>\n    </tr>\n    <tr>\n      <th>188530</th>\n      <td>188530</td>\n      <td>Mercedes-Benz</td>\n      <td>AMG GLC 63 Base 4MATIC</td>\n      <td>2021</td>\n      <td>13650</td>\n      <td>Gasoline</td>\n      <td>469.0HP 4.0L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>7-Speed A/T</td>\n      <td>White</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>86900</td>\n    </tr>\n    <tr>\n      <th>188531</th>\n      <td>188531</td>\n      <td>Audi</td>\n      <td>S5 3.0T Prestige</td>\n      <td>2022</td>\n      <td>13895</td>\n      <td>Gasoline</td>\n      <td>3.0L</td>\n      <td>1-Speed Automatic</td>\n      <td>Daytona Gray Pearl Effect</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>NaN</td>\n      <td>84900</td>\n    </tr>\n    <tr>\n      <th>188532</th>\n      <td>188532</td>\n      <td>Porsche</td>\n      <td>Macan Base</td>\n      <td>2016</td>\n      <td>59500</td>\n      <td>Gasoline</td>\n      <td>252.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>Transmission w/Dual Shift Mode</td>\n      <td>White</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>28995</td>\n    </tr>\n  </tbody>\n</table>\n<p>188533 rows × 13 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"sample_submission_df","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:19.142197Z","iopub.execute_input":"2024-09-19T09:06:19.142606Z","iopub.status.idle":"2024-09-19T09:06:19.153735Z","shell.execute_reply.started":"2024-09-19T09:06:19.142572Z","shell.execute_reply":"2024-09-19T09:06:19.152699Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"            id      price\n0       188533  43878.016\n1       188534  43878.016\n2       188535  43878.016\n3       188536  43878.016\n4       188537  43878.016\n...        ...        ...\n125685  314218  43878.016\n125686  314219  43878.016\n125687  314220  43878.016\n125688  314221  43878.016\n125689  314222  43878.016\n\n[125690 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>188533</td>\n      <td>43878.016</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>188534</td>\n      <td>43878.016</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>188535</td>\n      <td>43878.016</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>188536</td>\n      <td>43878.016</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>188537</td>\n      <td>43878.016</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>125685</th>\n      <td>314218</td>\n      <td>43878.016</td>\n    </tr>\n    <tr>\n      <th>125686</th>\n      <td>314219</td>\n      <td>43878.016</td>\n    </tr>\n    <tr>\n      <th>125687</th>\n      <td>314220</td>\n      <td>43878.016</td>\n    </tr>\n    <tr>\n      <th>125688</th>\n      <td>314221</td>\n      <td>43878.016</td>\n    </tr>\n    <tr>\n      <th>125689</th>\n      <td>314222</td>\n      <td>43878.016</td>\n    </tr>\n  </tbody>\n</table>\n<p>125690 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:19.154962Z","iopub.execute_input":"2024-09-19T09:06:19.155315Z","iopub.status.idle":"2024-09-19T09:06:19.313486Z","shell.execute_reply.started":"2024-09-19T09:06:19.155271Z","shell.execute_reply":"2024-09-19T09:06:19.312545Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"id                  0\nbrand               0\nmodel               0\nmodel_year          0\nmilage              0\nfuel_type        5083\nengine              0\ntransmission        0\next_col             0\nint_col             0\naccident         2452\nclean_title     21419\nprice               0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# Replace null values in 'fuel_type', 'accident', and 'clean_title'\ntrain_df.loc[train_df['fuel_type'].isnull(), 'fuel_type'] = 'electricity'\ntrain_df.loc[train_df['accident'].isnull(), 'accident'] = 'At least 1 accident or damage reported'\ntrain_df.loc[train_df['clean_title'].isnull(), 'clean_title'] = 'no'","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:19.314720Z","iopub.execute_input":"2024-09-19T09:06:19.315127Z","iopub.status.idle":"2024-09-19T09:06:19.375437Z","shell.execute_reply.started":"2024-09-19T09:06:19.315086Z","shell.execute_reply":"2024-09-19T09:06:19.374683Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# Display the modified DataFrame to check the changes\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:19.376534Z","iopub.execute_input":"2024-09-19T09:06:19.377189Z","iopub.status.idle":"2024-09-19T09:06:19.390816Z","shell.execute_reply.started":"2024-09-19T09:06:19.377146Z","shell.execute_reply":"2024-09-19T09:06:19.389790Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"   id          brand              model  model_year  milage      fuel_type  \\\n0   0           MINI      Cooper S Base        2007  213000       Gasoline   \n1   1        Lincoln              LS V8        2002  143250       Gasoline   \n2   2      Chevrolet  Silverado 2500 LT        2002  136731  E85 Flex Fuel   \n3   3        Genesis   G90 5.0 Ultimate        2017   19500       Gasoline   \n4   4  Mercedes-Benz        Metris Base        2021    7388       Gasoline   \n\n                                              engine  \\\n0       172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel   \n1       252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel   \n2  320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...   \n3       420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel   \n4       208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n\n                     transmission ext_col int_col  \\\n0                             A/T  Yellow    Gray   \n1                             A/T  Silver   Beige   \n2                             A/T    Blue    Gray   \n3  Transmission w/Dual Shift Mode   Black   Black   \n4                     7-Speed A/T   Black   Beige   \n\n                                 accident clean_title  price  \n0                           None reported         Yes   4200  \n1  At least 1 accident or damage reported         Yes   4999  \n2                           None reported         Yes  13900  \n3                           None reported         Yes  45000  \n4                           None reported         Yes  97500  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>brand</th>\n      <th>model</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>fuel_type</th>\n      <th>engine</th>\n      <th>transmission</th>\n      <th>ext_col</th>\n      <th>int_col</th>\n      <th>accident</th>\n      <th>clean_title</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>MINI</td>\n      <td>Cooper S Base</td>\n      <td>2007</td>\n      <td>213000</td>\n      <td>Gasoline</td>\n      <td>172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Yellow</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>4200</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Lincoln</td>\n      <td>LS V8</td>\n      <td>2002</td>\n      <td>143250</td>\n      <td>Gasoline</td>\n      <td>252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Silver</td>\n      <td>Beige</td>\n      <td>At least 1 accident or damage reported</td>\n      <td>Yes</td>\n      <td>4999</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Chevrolet</td>\n      <td>Silverado 2500 LT</td>\n      <td>2002</td>\n      <td>136731</td>\n      <td>E85 Flex Fuel</td>\n      <td>320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...</td>\n      <td>A/T</td>\n      <td>Blue</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>13900</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Genesis</td>\n      <td>G90 5.0 Ultimate</td>\n      <td>2017</td>\n      <td>19500</td>\n      <td>Gasoline</td>\n      <td>420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>Transmission w/Dual Shift Mode</td>\n      <td>Black</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>45000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Mercedes-Benz</td>\n      <td>Metris Base</td>\n      <td>2021</td>\n      <td>7388</td>\n      <td>Gasoline</td>\n      <td>208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>7-Speed A/T</td>\n      <td>Black</td>\n      <td>Beige</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>97500</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:19.391995Z","iopub.execute_input":"2024-09-19T09:06:19.392421Z","iopub.status.idle":"2024-09-19T09:06:19.558562Z","shell.execute_reply.started":"2024-09-19T09:06:19.392374Z","shell.execute_reply":"2024-09-19T09:06:19.557533Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"id              0\nbrand           0\nmodel           0\nmodel_year      0\nmilage          0\nfuel_type       0\nengine          0\ntransmission    0\next_col         0\nint_col         0\naccident        0\nclean_title     0\nprice           0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nimport numpy as np\n\n# Initialize label encoders dictionary for train data\nlabel_encoders = {}\n\n# Encode categorical features in the train set\nfor column in train_df.columns:\n    if train_df[column].dtype == 'object':\n        le = LabelEncoder()\n        train_df[column] = le.fit_transform(train_df[column].astype(str))\n        label_encoders[column] = le\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:19.559779Z","iopub.execute_input":"2024-09-19T09:06:19.560108Z","iopub.status.idle":"2024-09-19T09:06:19.994561Z","shell.execute_reply.started":"2024-09-19T09:06:19.560073Z","shell.execute_reply":"2024-09-19T09:06:19.993563Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"from scipy import stats\n# Handle outliers in the 'price' column\nz_scores = np.abs(stats.zscore(train_df['price']))\ntrain_df = train_df.loc[(z_scores < 3)]  # Use .loc[] to avoid SettingWithCopyWarning\n\n# Log transform 'price'\ntrain_df['price'] = np.log1p(train_df['price'])","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:19.995877Z","iopub.execute_input":"2024-09-19T09:06:19.996289Z","iopub.status.idle":"2024-09-19T09:06:20.020217Z","shell.execute_reply.started":"2024-09-19T09:06:19.996246Z","shell.execute_reply":"2024-09-19T09:06:20.019270Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_503/3842420899.py:7: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  train_df['price'] = np.log1p(train_df['price'])\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:20.021288Z","iopub.execute_input":"2024-09-19T09:06:20.021621Z","iopub.status.idle":"2024-09-19T09:06:20.038237Z","shell.execute_reply.started":"2024-09-19T09:06:20.021589Z","shell.execute_reply":"2024-09-19T09:06:20.037208Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"            id  brand  model  model_year  milage  fuel_type  engine  \\\n0            0     31    495        2007  213000          2     116   \n1            1     28    930        2002  143250          2     366   \n2            2      9   1575        2002  136731          1     640   \n3            3     16    758        2017   19500          2     863   \n4            4     36   1077        2021    7388          2     259   \n...        ...    ...    ...         ...     ...        ...     ...   \n188528  188528      8    604        2017   49000          2     866   \n188529  188529     36    206        2018   28600          2     770   \n188530  188530     36    223        2021   13650          2     921   \n188531  188531      3   1471        2022   13895          2     512   \n188532  188532     43   1028        2016   59500          2     364   \n\n        transmission  ext_col  int_col  accident  clean_title      price  \n0                 38      312       71         1            0   8.343078  \n1                 38      263       10         0            0   8.517193  \n2                 38       38       71         1            0   9.539716  \n3                 49       29       14         1            0  10.714440  \n4                 23       29       10         1            0  11.487618  \n...              ...      ...      ...       ...          ...        ...  \n188528            49      304       10         1            0  10.221978  \n188529            31      304       14         0            0  10.308986  \n188530            23      304       14         1            0  11.372525  \n188531             1       82       14         1            1  11.349241  \n188532            49      304       14         1            0  10.274913  \n\n[187218 rows x 13 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>brand</th>\n      <th>model</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>fuel_type</th>\n      <th>engine</th>\n      <th>transmission</th>\n      <th>ext_col</th>\n      <th>int_col</th>\n      <th>accident</th>\n      <th>clean_title</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>31</td>\n      <td>495</td>\n      <td>2007</td>\n      <td>213000</td>\n      <td>2</td>\n      <td>116</td>\n      <td>38</td>\n      <td>312</td>\n      <td>71</td>\n      <td>1</td>\n      <td>0</td>\n      <td>8.343078</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>28</td>\n      <td>930</td>\n      <td>2002</td>\n      <td>143250</td>\n      <td>2</td>\n      <td>366</td>\n      <td>38</td>\n      <td>263</td>\n      <td>10</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.517193</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>9</td>\n      <td>1575</td>\n      <td>2002</td>\n      <td>136731</td>\n      <td>1</td>\n      <td>640</td>\n      <td>38</td>\n      <td>38</td>\n      <td>71</td>\n      <td>1</td>\n      <td>0</td>\n      <td>9.539716</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>16</td>\n      <td>758</td>\n      <td>2017</td>\n      <td>19500</td>\n      <td>2</td>\n      <td>863</td>\n      <td>49</td>\n      <td>29</td>\n      <td>14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10.714440</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>36</td>\n      <td>1077</td>\n      <td>2021</td>\n      <td>7388</td>\n      <td>2</td>\n      <td>259</td>\n      <td>23</td>\n      <td>29</td>\n      <td>10</td>\n      <td>1</td>\n      <td>0</td>\n      <td>11.487618</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>188528</th>\n      <td>188528</td>\n      <td>8</td>\n      <td>604</td>\n      <td>2017</td>\n      <td>49000</td>\n      <td>2</td>\n      <td>866</td>\n      <td>49</td>\n      <td>304</td>\n      <td>10</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10.221978</td>\n    </tr>\n    <tr>\n      <th>188529</th>\n      <td>188529</td>\n      <td>36</td>\n      <td>206</td>\n      <td>2018</td>\n      <td>28600</td>\n      <td>2</td>\n      <td>770</td>\n      <td>31</td>\n      <td>304</td>\n      <td>14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>10.308986</td>\n    </tr>\n    <tr>\n      <th>188530</th>\n      <td>188530</td>\n      <td>36</td>\n      <td>223</td>\n      <td>2021</td>\n      <td>13650</td>\n      <td>2</td>\n      <td>921</td>\n      <td>23</td>\n      <td>304</td>\n      <td>14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>11.372525</td>\n    </tr>\n    <tr>\n      <th>188531</th>\n      <td>188531</td>\n      <td>3</td>\n      <td>1471</td>\n      <td>2022</td>\n      <td>13895</td>\n      <td>2</td>\n      <td>512</td>\n      <td>1</td>\n      <td>82</td>\n      <td>14</td>\n      <td>1</td>\n      <td>1</td>\n      <td>11.349241</td>\n    </tr>\n    <tr>\n      <th>188532</th>\n      <td>188532</td>\n      <td>43</td>\n      <td>1028</td>\n      <td>2016</td>\n      <td>59500</td>\n      <td>2</td>\n      <td>364</td>\n      <td>49</td>\n      <td>304</td>\n      <td>14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10.274913</td>\n    </tr>\n  </tbody>\n</table>\n<p>187218 rows × 13 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Calculate correlation matrix\ncorr_matrix = train_df.corr()\n\n# Plot the correlation heatmap\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')\nplt.show()\n\n# Correlation with the target variable 'class'\ncorr_with_class = corr_matrix['price'].sort_values(ascending=False)\nprint(corr_with_class)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:20.041252Z","iopub.execute_input":"2024-09-19T09:06:20.041559Z","iopub.status.idle":"2024-09-19T09:06:20.829340Z","shell.execute_reply.started":"2024-09-19T09:06:20.041528Z","shell.execute_reply":"2024-09-19T09:06:20.828402Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"price           1.000000\nmodel_year      0.683511\nengine          0.457205\naccident        0.284473\nclean_title     0.202567\nfuel_type       0.090323\nint_col         0.035910\ntransmission    0.030341\nbrand           0.005374\nid              0.000288\nmodel          -0.027977\next_col        -0.032342\nmilage         -0.707370\nName: price, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"# Drop features with low correlation\ntrain_df.drop(columns=['brand', 'model', 'transmission', 'id', 'ext_col', 'int_col'], inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:20.830508Z","iopub.execute_input":"2024-09-19T09:06:20.830813Z","iopub.status.idle":"2024-09-19T09:06:20.842945Z","shell.execute_reply.started":"2024-09-19T09:06:20.830781Z","shell.execute_reply":"2024-09-19T09:06:20.841882Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_503/2770318336.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  train_df.drop(columns=['brand', 'model', 'transmission', 'id', 'ext_col', 'int_col'], inplace=True)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Random Forest Regression1","metadata":{}},{"cell_type":"code","source":"# Split the data into features and target variable\nX = train_df.drop('price', axis=1)\ny = train_df['price']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Standardize the features\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:21.034897Z","iopub.execute_input":"2024-09-19T09:06:21.035293Z","iopub.status.idle":"2024-09-19T09:06:21.084548Z","shell.execute_reply.started":"2024-09-19T09:06:21.035243Z","shell.execute_reply":"2024-09-19T09:06:21.083760Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"# Initialize GPU Random Forest Regressor\nmodelrf = cuml_RandomForestRegressor(random_state=42, n_streams=1)\n\n# Manual Hyperparameter Tuning Loop without None in max_depth\nbest_params = None\nbest_score = float('inf')\n\nfor n_estimators in [50, 100, 150]:\n    for max_depth in [10, 20, 30]:  # Removed None\n        model = cuml_RandomForestRegressor(n_estimators=n_estimators, max_depth=max_depth, random_state=42, n_streams=1)\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        mse = mean_squared_error(y_test, y_pred)\n        if mse < best_score:\n            best_score = mse\n            best_params = {'n_estimators': n_estimators, 'max_depth': max_depth}\n\n# Train the best model with selected hyperparameters\nbest_model_gpu = cuml_RandomForestRegressor(**best_params, random_state=42, n_streams=1)\nbest_model_gpu.fit(X_train, y_train)\n\n# Predict on the test set\ny_pred = best_model_gpu.predict(X_test)\n\n# Convert predictions to numpy array if needed for compatibility\ny_pred = np.array(y_pred)\n\n# Convert predictions back to the original scale\ny_pred = np.expm1(y_pred)\ny_test = np.expm1(y_test)\n\n# Calculate evaluation metrics\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nr2 = r2_score(y_test, y_pred)\nmae = mean_absolute_error(y_test, y_pred)\n\n# Display the results\nprint(f\"\\nBest Hyperparameters: {best_params}\")\nprint(f\"\\nGPU Random Forest Regressor - Evaluation Metrics:\")\nprint(f\"Mean Squared Error (MSE): {mse:.2f}\")\nprint(f\"Root Mean Squared Error (RMSE): {rmse:.2f}\")\nprint(f\"R^2 Score: {r2:.2f}\")\nprint(f\"Mean Absolute Error (MAE): {mae:.2f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T08:02:53.343252Z","iopub.execute_input":"2024-09-19T08:02:53.343976Z","iopub.status.idle":"2024-09-19T08:03:07.601122Z","shell.execute_reply.started":"2024-09-19T08:02:53.343933Z","shell.execute_reply":"2024-09-19T08:03:07.599870Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/cuml/internals/api_decorators.py:188: UserWarning: To use pickling first train using float32 data to fit the estimator\n  ret = func(*args, **kwargs)\n/opt/conda/lib/python3.10/site-packages/cuml/internals/api_decorators.py:188: UserWarning: To use pickling first train using float32 data to fit the estimator\n  ret = func(*args, **kwargs)\n/opt/conda/lib/python3.10/site-packages/cuml/internals/api_decorators.py:188: UserWarning: To use pickling first train using float32 data to fit the estimator\n  ret = func(*args, **kwargs)\n/opt/conda/lib/python3.10/site-packages/cuml/internals/api_decorators.py:188: UserWarning: To use pickling first train using float32 data to fit the estimator\n  ret = func(*args, **kwargs)\n/opt/conda/lib/python3.10/site-packages/cuml/internals/api_decorators.py:188: UserWarning: To use pickling first train using float32 data to fit the estimator\n  ret = func(*args, **kwargs)\n/opt/conda/lib/python3.10/site-packages/cuml/internals/api_decorators.py:188: UserWarning: To use pickling first train using float32 data to fit the estimator\n  ret = func(*args, **kwargs)\n/opt/conda/lib/python3.10/site-packages/cuml/internals/api_decorators.py:188: UserWarning: To use pickling first train using float32 data to fit the estimator\n  ret = func(*args, **kwargs)\n/opt/conda/lib/python3.10/site-packages/cuml/internals/api_decorators.py:188: UserWarning: To use pickling first train using float32 data to fit the estimator\n  ret = func(*args, **kwargs)\n/opt/conda/lib/python3.10/site-packages/cuml/internals/api_decorators.py:188: UserWarning: To use pickling first train using float32 data to fit the estimator\n  ret = func(*args, **kwargs)\n/opt/conda/lib/python3.10/site-packages/cuml/internals/api_decorators.py:188: UserWarning: To use pickling first train using float32 data to fit the estimator\n  ret = func(*args, **kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\nBest Hyperparameters: {'n_estimators': 100, 'max_depth': 30}\n\nGPU Random Forest Regressor - Evaluation Metrics:\nMean Squared Error (MSE): 792961922.66\nRoot Mean Squared Error (RMSE): 28159.58\nR^2 Score: 0.39\nMean Absolute Error (MAE): 14431.02\n","output_type":"stream"}]},{"cell_type":"code","source":"# import joblib\n\n# # Save the model to a file\n# joblib.dump(best_model, 'random_forest_model_gpu.pkl')\n\n# print(\"Model saved successfully!\")","metadata":{"execution":{"iopub.status.busy":"2024-09-19T07:44:35.380029Z","iopub.execute_input":"2024-09-19T07:44:35.382234Z","iopub.status.idle":"2024-09-19T07:44:35.387665Z","shell.execute_reply.started":"2024-09-19T07:44:35.382192Z","shell.execute_reply":"2024-09-19T07:44:35.386733Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"Random Forest Regression2\n","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n# Initialize Random Forest Regressor for CPU\nmodelrf = RandomForestRegressor(random_state=42)\n\n# Hyperparameter tuning with GridSearchCV\nparam_grid = {\n    'n_estimators': [50, 100, 150],\n    'max_depth': [10, 20, 30],  # Removed None for consistency\n    'min_samples_split': [2, 5, 10]\n}\n\ngrid_search = GridSearchCV(estimator=modelrf, param_grid=param_grid, cv=3, n_jobs=-1, scoring='neg_mean_squared_error')\ngrid_search.fit(X_train, y_train)\n\n# Train the best model\nbest_model = grid_search.best_estimator_\n\n# Predict on the test set (log-transformed prices)\ny_pred_log = best_model.predict(X_test)\n\n# Convert predictions back to the original scale\ny_pred_original = np.expm1(y_pred_log)\ny_test_original = np.expm1(y_test)\n\n# Calculate evaluation metrics\nmse = mean_squared_error(y_test_original, y_pred_original)\nrmse = np.sqrt(mse)\nr2 = r2_score(y_test_original, y_pred_original)\nmae = mean_absolute_error(y_test_original, y_pred_original)\n\n# Display the results\nprint(f\"\\nBest Hyperparameters: {grid_search.best_params_}\")\nprint(f\"\\nRandom Forest Regressor (CPU) - Evaluation Metrics:\")\nprint(f\"Mean Squared Error (MSE): {mse:.2f}\")\nprint(f\"Root Mean Squared Error (RMSE): {rmse:.2f}\")\nprint(f\"R^2 Score: {r2:.2f}\")\nprint(f\"Mean Absolute Error (MAE): {mae:.2f}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-19T07:44:35.392412Z","iopub.execute_input":"2024-09-19T07:44:35.395047Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"# import joblib\n\n# # Save the model to a file\n# joblib.dump(best_model, 'random_forest_model_cpu.pkl')\n\n# print(\"Model saved successfully!\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Support Vector Regression(SVR)","metadata":{}},{"cell_type":"code","source":"import cuml\nimport cupy as cp\nfrom cuml.svm import SVR as cuml_SVR\nfrom cuml.model_selection import GridSearchCV as cuml_GridSearchCV\n\n# Convert data to GPU arrays (cuPy)\nX_train_gpu = cp.asarray(X_train)\ny_train_gpu = cp.asarray(y_train)\nX_test_gpu = cp.asarray(X_test)\ny_test_gpu = cp.asarray(y_test)\n\n# Initialize cuML SVR model\nmodel_svr_gpu = cuml_SVR()\n\n# Define hyperparameters grid\nparam_grid_svr_gpu = {\n    'C': [0.1, 1, 10],\n    'epsilon': [0.01, 0.1, 0.2],\n    'kernel': ['linear', 'rbf']\n}\n\n# Hyperparameter tuning with cuML GridSearchCV\ngrid_search_svr_gpu = cuml_GridSearchCV(estimator=model_svr_gpu, param_grid=param_grid_svr_gpu, cv=3, scoring='neg_mean_squared_error')\ngrid_search_svr_gpu.fit(X_train_gpu, y_train_gpu)\n\n# Best model\nbest_model_svr_gpu = grid_search_svr_gpu.best_estimator_\n\n# Predict on the test set\ny_pred_svr_gpu = best_model_svr_gpu.predict(X_test_gpu)\n\n# Convert predictions to numpy array if needed for compatibility\ny_pred_svr_gpu = cp.asnumpy(y_pred_svr_gpu)\n\n# Convert predictions back to the original scale\ny_pred_svr_gpu = np.expm1(y_pred_svr_gpu)\ny_test = np.expm1(y_test)\n\n# Calculate evaluation metrics\nmse_svr_gpu = mean_squared_error(y_test, y_pred_svr_gpu)\nrmse_svr_gpu = np.sqrt(mse_svr_gpu)\nr2_svr_gpu = r2_score(y_test, y_pred_svr_gpu)\nmae_svr_gpu = mean_absolute_error(y_test, y_pred_svr_gpu)\n\n# Display the results\nprint(\"\\nSupport Vector Regression (GPU) - Evaluation Metrics:\")\nprint(f\"Best Hyperparameters: {grid_search_svr_gpu.best_params_}\")\nprint(f\"Mean Squared Error (MSE): {mse_svr_gpu:.2f}\")\nprint(f\"Root Mean Squared Error (RMSE): {rmse_svr_gpu:.2f}\")\nprint(f\"R^2 Score: {r2_svr_gpu:.2f}\")\nprint(f\"Mean Absolute Error (MAE): {mae_svr_gpu:.2f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T08:03:14.006035Z","iopub.execute_input":"2024-09-19T08:03:14.006907Z","iopub.status.idle":"2024-09-19T08:15:01.587751Z","shell.execute_reply.started":"2024-09-19T08:03:14.006866Z","shell.execute_reply":"2024-09-19T08:15:01.586206Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[W] [08:14:39.556655] SVR with the linear kernel can be much faster using the specialized solver provided by LinearSVR. Consider switching to LinearSVR if tranining takes too long.\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/pandas/core/arraylike.py:399: RuntimeWarning: overflow encountered in expm1\n  result = getattr(ufunc, method)(*inputs, **kwargs)\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[18], line 40\u001b[0m\n\u001b[1;32m     37\u001b[0m y_test \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mexpm1(y_test)\n\u001b[1;32m     39\u001b[0m \u001b[38;5;66;03m# Calculate evaluation metrics\u001b[39;00m\n\u001b[0;32m---> 40\u001b[0m mse_svr_gpu \u001b[38;5;241m=\u001b[39m \u001b[43mmean_squared_error\u001b[49m\u001b[43m(\u001b[49m\u001b[43my_test\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_pred_svr_gpu\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     41\u001b[0m rmse_svr_gpu \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39msqrt(mse_svr_gpu)\n\u001b[1;32m     42\u001b[0m r2_svr_gpu \u001b[38;5;241m=\u001b[39m r2_score(y_test, y_pred_svr_gpu)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py:442\u001b[0m, in \u001b[0;36mmean_squared_error\u001b[0;34m(y_true, y_pred, sample_weight, multioutput, squared)\u001b[0m\n\u001b[1;32m    382\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmean_squared_error\u001b[39m(\n\u001b[1;32m    383\u001b[0m     y_true, y_pred, \u001b[38;5;241m*\u001b[39m, sample_weight\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, multioutput\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124muniform_average\u001b[39m\u001b[38;5;124m\"\u001b[39m, squared\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m    384\u001b[0m ):\n\u001b[1;32m    385\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Mean squared error regression loss.\u001b[39;00m\n\u001b[1;32m    386\u001b[0m \n\u001b[1;32m    387\u001b[0m \u001b[38;5;124;03m    Read more in the :ref:`User Guide <mean_squared_error>`.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    440\u001b[0m \u001b[38;5;124;03m    0.825...\u001b[39;00m\n\u001b[1;32m    441\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 442\u001b[0m     y_type, y_true, y_pred, multioutput \u001b[38;5;241m=\u001b[39m \u001b[43m_check_reg_targets\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    443\u001b[0m \u001b[43m        \u001b[49m\u001b[43my_true\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_pred\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmultioutput\u001b[49m\n\u001b[1;32m    444\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    445\u001b[0m     check_consistent_length(y_true, y_pred, sample_weight)\n\u001b[1;32m    446\u001b[0m     output_errors \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39maverage((y_true \u001b[38;5;241m-\u001b[39m y_pred) \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m \u001b[38;5;241m2\u001b[39m, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m, weights\u001b[38;5;241m=\u001b[39msample_weight)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py:101\u001b[0m, in \u001b[0;36m_check_reg_targets\u001b[0;34m(y_true, y_pred, multioutput, dtype)\u001b[0m\n\u001b[1;32m     67\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Check that y_true and y_pred belong to the same regression task.\u001b[39;00m\n\u001b[1;32m     68\u001b[0m \n\u001b[1;32m     69\u001b[0m \u001b[38;5;124;03mParameters\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     98\u001b[0m \u001b[38;5;124;03m    correct keyword.\u001b[39;00m\n\u001b[1;32m     99\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    100\u001b[0m check_consistent_length(y_true, y_pred)\n\u001b[0;32m--> 101\u001b[0m y_true \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43my_true\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mensure_2d\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    102\u001b[0m y_pred \u001b[38;5;241m=\u001b[39m check_array(y_pred, ensure_2d\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, dtype\u001b[38;5;241m=\u001b[39mdtype)\n\u001b[1;32m    104\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m y_true\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py:921\u001b[0m, in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    915\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    916\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFound array with dim \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m. \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m expected <= 2.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    917\u001b[0m             \u001b[38;5;241m%\u001b[39m (array\u001b[38;5;241m.\u001b[39mndim, estimator_name)\n\u001b[1;32m    918\u001b[0m         )\n\u001b[1;32m    920\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m force_all_finite:\n\u001b[0;32m--> 921\u001b[0m         \u001b[43m_assert_all_finite\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    922\u001b[0m \u001b[43m            \u001b[49m\u001b[43marray\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    923\u001b[0m \u001b[43m            \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minput_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    924\u001b[0m \u001b[43m            \u001b[49m\u001b[43mestimator_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    925\u001b[0m \u001b[43m            \u001b[49m\u001b[43mallow_nan\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mforce_all_finite\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m==\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mallow-nan\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    926\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    928\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ensure_min_samples \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    929\u001b[0m     n_samples \u001b[38;5;241m=\u001b[39m _num_samples(array)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py:161\u001b[0m, in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[1;32m    144\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m estimator_name \u001b[38;5;129;01mand\u001b[39;00m input_name \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m has_nan_error:\n\u001b[1;32m    145\u001b[0m     \u001b[38;5;66;03m# Improve the error message on how to handle missing values in\u001b[39;00m\n\u001b[1;32m    146\u001b[0m     \u001b[38;5;66;03m# scikit-learn.\u001b[39;00m\n\u001b[1;32m    147\u001b[0m     msg_err \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    148\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mestimator_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m does not accept missing values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    149\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m encoded as NaN natively. For supervised learning, you might want\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    159\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m#estimators-that-handle-nan-values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    160\u001b[0m     )\n\u001b[0;32m--> 161\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg_err)\n","\u001b[0;31mValueError\u001b[0m: Input contains infinity or a value too large for dtype('float64')."],"ename":"ValueError","evalue":"Input contains infinity or a value too large for dtype('float64').","output_type":"error"}]},{"cell_type":"markdown","source":"K-Nearest Neighbors Regression (KNN)","metadata":{}},{"cell_type":"code","source":"import cuml\nimport cupy as cp\nfrom cuml.neighbors import KNeighborsRegressor as cuml_KNeighborsRegressor\nfrom cuml.model_selection import GridSearchCV as cuml_GridSearchCV\n\n# Convert data to GPU arrays (cuPy)\nX_train_gpu = cp.asarray(X_train)\ny_train_gpu = cp.asarray(y_train)\nX_test_gpu = cp.asarray(X_test)\ny_test_gpu = cp.asarray(y_test)\n\n# Initialize cuML KNN model\nmodel_knn_gpu = cuml_KNeighborsRegressor()\n\n# Define hyperparameters grid\nparam_grid_knn_gpu = {\n    'n_neighbors': [5, 10, 15],\n    'weights': ['uniform', 'distance'],\n    'p': [1, 2]  # p=1 for Manhattan distance, p=2 for Euclidean distance\n}\n\n# Hyperparameter tuning with cuML GridSearchCV\ngrid_search_knn_gpu = cuml_GridSearchCV(estimator=model_knn_gpu, param_grid=param_grid_knn_gpu, cv=3, scoring='neg_mean_squared_error')\ngrid_search_knn_gpu.fit(X_train_gpu, y_train_gpu)\n\n# Best model\nbest_model_knn_gpu = grid_search_knn_gpu.best_estimator_\n\n# Predict on the test set\ny_pred_knn_gpu = best_model_knn_gpu.predict(X_test_gpu)\n\n\n\n# Convert predictions to numpy array if needed for compatibility\ny_pred_knn_gpu = cp.asnumpy(y_pred_knn_gpu)\n\n# Calculate evaluation metrics\nmse_knn_gpu = mean_squared_error(y_test, y_pred_knn_gpu)\nrmse_knn_gpu = np.sqrt(mse_knn_gpu)\nr2_knn_gpu = r2_score(y_test, y_pred_knn_gpu)\nmae_knn_gpu = mean_absolute_error(y_test, y_pred_knn_gpu)\n\n# Display the results\nprint(\"\\nK-Nearest Neighbors Regression (GPU) - Evaluation Metrics:\")\nprint(f\"Best Hyperparameters: {grid_search_knn_gpu.best_params_}\")\nprint(f\"Mean Squared Error (MSE): {mse_knn_gpu:.2f}\")\nprint(f\"Root Mean Squared Error (RMSE): {rmse_knn_gpu:.2f}\")\nprint(f\"R^2 Score: {r2_knn_gpu:.2f}\")\nprint(f\"Mean Absolute Error (MAE): {mae_knn_gpu:.2f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T07:45:15.008965Z","iopub.execute_input":"2024-09-18T07:45:15.009461Z","iopub.status.idle":"2024-09-18T07:46:04.214293Z","shell.execute_reply.started":"2024-09-18T07:45:15.009395Z","shell.execute_reply":"2024-09-18T07:46:04.213419Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"[I] [07:45:15.024764] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:45:15.030111] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/cupy/cuda/compiler.py:233: PerformanceWarning: Jitify is performing a one-time only warm-up to populate the persistent cache, this may take a few seconds and will be improved in a future release...\n  jitify._init_module()\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:45:57.700932] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:45:57.857409] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:45:58.014893] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:45:58.165431] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:45:58.318101] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:45:58.470207] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:45:58.623664] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:45:58.774690] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:45:58.929400] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:45:59.081211] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:45:59.235581] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:45:59.389236] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:45:59.546957] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:45:59.704689] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:45:59.869366] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:46:00.025722] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:46:00.184141] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:46:00.503007] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:46:00.660294] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:46:00.820630] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:46:00.978016] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:46:01.136244] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:46:01.296092] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:46:01.454112] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:46:01.616853] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:46:01.780856] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:46:01.945445] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:46:02.113442] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:46:02.278048] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:46:02.444706] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:46:02.608867] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:46:02.773999] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:46:02.935966] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:46:03.100225] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:46:03.264471] Unused keyword parameter: n_jobs during cuML estimator initialization\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:778: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 767, in _score\n    scores = scorer(estimator, X_test, y_test)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 234, in __call__\n    return self._score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 282, in _score\n    return self._sign * self._score_func(y_true, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 442, in mean_squared_error\n    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_regression.py\", line 101, in _check_reg_targets\n    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"cupy/_core/core.pyx\", line 1479, in cupy._core.core._ndarray_base.__array__\nTypeError: Implicit conversion to a NumPy array is not allowed. Please use `.get()` to construct a NumPy array explicitly.\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [nan nan nan nan nan nan nan nan nan nan nan nan]\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[I] [07:46:03.431129] Unused keyword parameter: n_jobs during cuML estimator initialization\n[I] [07:46:03.432045] Unused keyword parameter: n_jobs during cuML estimator initialization\n\nK-Nearest Neighbors Regression (GPU) - Evaluation Metrics:\nBest Hyperparameters: {'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}\nMean Squared Error (MSE): 0.25\nRoot Mean Squared Error (RMSE): 0.50\nR^2 Score: 0.61\nMean Absolute Error (MAE): 0.37\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Gradient Boosting Regression","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import GridSearchCV\n\n# Initialize Gradient Boosting model\nmodel_gbr = GradientBoostingRegressor()\n\n# Define hyperparameters grid\nparam_grid_gbr = {\n    'n_estimators': [100, 200],\n    'learning_rate': [0.01, 0.1, 0.2],\n    'max_depth': [3, 5, 7],\n    'min_samples_split': [2, 5, 10]\n}\n\n# Hyperparameter tuning\ngrid_search_gbr = GridSearchCV(estimator=model_gbr, param_grid=param_grid_gbr, cv=3, n_jobs=-1, scoring='neg_mean_squared_error')\ngrid_search_gbr.fit(X_train, y_train)\n\n# Best model\nbest_model_gbr = grid_search_gbr.best_estimator_\n\n# Predict on the test set\ny_pred_gbr = best_model_gbr.predict(X_test)\n\n# Convert predictions back to the original scale\ny_pred_gbr = np.expm1(y_pred_gbr)\ny_test = np.expm1(y_test)\n\n# Calculate evaluation metrics\nmse_gbr = mean_squared_error(y_test, y_pred_gbr)\nrmse_gbr = np.sqrt(mse_gbr)\nr2_gbr = r2_score(y_test, y_pred_gbr)\nmae_gbr = mean_absolute_error(y_test, y_pred_gbr)\n\n# Display the results\nprint(\"\\nGradient Boosting Regression - Evaluation Metrics:\")\nprint(f\"Best Hyperparameters: {grid_search_gbr.best_params_}\")\nprint(f\"Mean Squared Error (MSE): {mse_gbr:.2f}\")\nprint(f\"Root Mean Squared Error (RMSE): {rmse_gbr:.2f}\")\nprint(f\"R^2 Score: {r2_gbr:.2f}\")\nprint(f\"Mean Absolute Error (MAE): {mae_gbr:.2f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:06:39.568182Z","iopub.execute_input":"2024-09-19T09:06:39.568628Z","iopub.status.idle":"2024-09-19T09:21:51.284355Z","shell.execute_reply.started":"2024-09-19T09:06:39.568590Z","shell.execute_reply":"2024-09-19T09:21:51.283129Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"\nGradient Boosting Regression - Evaluation Metrics:\nBest Hyperparameters: {'learning_rate': 0.1, 'max_depth': 7, 'min_samples_split': 10, 'n_estimators': 200}\nMean Squared Error (MSE): 716318389.14\nRoot Mean Squared Error (RMSE): 26764.13\nR^2 Score: 0.45\nMean Absolute Error (MAE): 13296.98\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Neural Network Regression (MLPRegressor)","metadata":{}},{"cell_type":"code","source":"from sklearn.neural_network import MLPRegressor\nfrom sklearn.model_selection import GridSearchCV\n\n# Initialize Neural Network model\nmodel_mlp = MLPRegressor(max_iter=500, random_state=42)\n\n# Define hyperparameters grid\nparam_grid_mlp = {\n    'hidden_layer_sizes': [(50,), (100,), (50, 50)],\n    'activation': ['tanh', 'relu'],\n    'solver': ['adam', 'sgd'],\n    'alpha': [0.0001, 0.001, 0.01]\n}\n\n# Hyperparameter tuning\ngrid_search_mlp = GridSearchCV(estimator=model_mlp, param_grid=param_grid_mlp, cv=3, n_jobs=-1, scoring='neg_mean_squared_error')\ngrid_search_mlp.fit(X_train, y_train)\n\n# Best model\nbest_model_mlp = grid_search_mlp.best_estimator_\n\n# Predict on the test set\ny_pred_mlp = best_model_mlp.predict(X_test)\n\n# Convert predictions to numpy array if needed for compatibility\ny_pred_mlp = np.array(y_pred_mlp)\n\n# Calculate evaluation metrics\nmse_mlp = mean_squared_error(y_test, y_pred_mlp)\nrmse_mlp = np.sqrt(mse_mlp)\nr2_mlp = r2_score(y_test, y_pred_mlp)\nmae_mlp = mean_absolute_error(y_test, y_pred_mlp)\n\n# Display the results\nprint(\"\\nNeural Network Regression - Evaluation Metrics:\")\nprint(f\"Best Hyperparameters: {grid_search_mlp.best_params_}\")\nprint(f\"Mean Squared Error (MSE): {mse_mlp:.2f}\")\nprint(f\"Root Mean Squared Error (RMSE): {rmse_mlp:.2f}\")\nprint(f\"R^2 Score: {r2_mlp:.2f}\")\nprint(f\"Mean Absolute Error (MAE): {mae_mlp:.2f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T08:01:19.225114Z","iopub.execute_input":"2024-09-18T08:01:19.225411Z","iopub.status.idle":"2024-09-18T08:12:04.176982Z","shell.execute_reply.started":"2024-09-18T08:01:19.225377Z","shell.execute_reply":"2024-09-18T08:12:04.175740Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"\nNeural Network Regression - Evaluation Metrics:\nBest Hyperparameters: {'activation': 'tanh', 'alpha': 0.0001, 'hidden_layer_sizes': (50, 50), 'solver': 'adam'}\nMean Squared Error (MSE): 0.23\nRoot Mean Squared Error (RMSE): 0.48\nR^2 Score: 0.65\nMean Absolute Error (MAE): 0.35\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Linear Regression1","metadata":{}},{"cell_type":"code","source":"from cuml.linear_model import LinearRegression as cuml_LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nimport numpy as np\n\n# Initialize GPU Linear Regression model\nmodel_lr = cuml_LinearRegression()\n\n# Train the model on the training data\nmodel_lr.fit(X_train, y_train)\n\n# Predict on the test data\ny_pred_lr = model_lr.predict(X_test)\n\n# Convert predictions to numpy array for compatibility\ny_pred_lr = np.array(y_pred_lr)\n\n# Calculate evaluation metrics\nmse_lr = mean_squared_error(y_test, y_pred_lr)\nrmse_lr = np.sqrt(mse_lr)\nr2_lr = r2_score(y_test, y_pred_lr)\nmae_lr = mean_absolute_error(y_test, y_pred_lr)\n\n# Display the results\nprint(\"\\nGPU Linear Regression - Evaluation Metrics:\")\nprint(f\"Mean Squared Error (MSE): {mse_lr:.2f}\")\nprint(f\"Root Mean Squared Error (RMSE): {rmse_lr:.2f}\")\nprint(f\"R^2 Score: {r2_lr:.2f}\")\nprint(f\"Mean Absolute Error (MAE): {mae_lr:.2f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T08:12:04.178777Z","iopub.execute_input":"2024-09-18T08:12:04.179631Z","iopub.status.idle":"2024-09-18T08:12:04.688791Z","shell.execute_reply.started":"2024-09-18T08:12:04.179567Z","shell.execute_reply":"2024-09-18T08:12:04.687769Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/cuml/internals/api_decorators.py:382: UserWarning: Starting from version 23.08, the new 'copy_X' parameter defaults to 'True', ensuring a copy of X is created after passing it to fit(), preventing any changes to the input, but with increased memory usage. This represents a change in behavior from previous versions. With `copy_X=False` a copy might still be created if necessary. Explicitly set 'copy_X' to either True or False to suppress this warning.\n  return init_func(self, *args, **filtered_kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\nGPU Linear Regression - Evaluation Metrics:\nMean Squared Error (MSE): 0.24\nRoot Mean Squared Error (RMSE): 0.49\nR^2 Score: 0.63\nMean Absolute Error (MAE): 0.36\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Linear Regression2","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\n\n# Initialize Lasso Regression model\nmodel_lasso = Lasso()\n\n# Define hyperparameters grid\nparam_grid_lasso = {\n    'alpha': [0.1, 1, 10, 100]\n}\n\n# Hyperparameter tuning\ngrid_search_lasso = GridSearchCV(estimator=model_lasso, param_grid=param_grid_lasso, cv=3, n_jobs=-1, scoring='neg_mean_squared_error')\ngrid_search_lasso.fit(X_train, y_train)\n\n# Best model\nbest_model_lasso = grid_search_lasso.best_estimator_\n\n# Predict on the test set\ny_pred_lasso = best_model_lasso.predict(X_test)\n\n# Calculate evaluation metrics\nmse_lasso = mean_squared_error(y_test, y_pred_lasso)\nrmse_lasso = np.sqrt(mse_lasso)\nr2_lasso = r2_score(y_test, y_pred_lasso)\nmae_lasso = mean_absolute_error(y_test, y_pred_lasso)\n\n# Display the results\nprint(\"\\nLasso Regression - Evaluation Metrics:\")\nprint(f\"Best Hyperparameters: {grid_search_lasso.best_params_}\")\nprint(f\"Mean Squared Error (MSE): {mse_lasso:.2f}\")\nprint(f\"Root Mean Squared Error (RMSE): {rmse_lasso:.2f}\")\nprint(f\"R^2 Score: {r2_lasso:.2f}\")\nprint(f\"Mean Absolute Error (MAE): {mae_lasso:.2f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T08:12:04.690075Z","iopub.execute_input":"2024-09-18T08:12:04.690519Z","iopub.status.idle":"2024-09-18T08:12:05.251715Z","shell.execute_reply.started":"2024-09-18T08:12:04.690450Z","shell.execute_reply":"2024-09-18T08:12:05.250443Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"\nLasso Regression - Evaluation Metrics:\nBest Hyperparameters: {'alpha': 0.1}\nMean Squared Error (MSE): 0.26\nRoot Mean Squared Error (RMSE): 0.51\nR^2 Score: 0.60\nMean Absolute Error (MAE): 0.38\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Torch Regression","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom sklearn.preprocessing import StandardScaler\n\n# Standardize the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Convert data to PyTorch tensors\nX_train_tensor = torch.tensor(X_train_scaled, dtype=torch.float32)\ny_train_tensor = torch.tensor(y_train.values, dtype=torch.float32).view(-1, 1)\nX_test_tensor = torch.tensor(X_test_scaled, dtype=torch.float32)\ny_test_tensor = torch.tensor(y_test.values, dtype=torch.float32).view(-1, 1)\n\n# Define the PyTorch model\nclass NeuralNet(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(NeuralNet, self).__init__()\n        self.fc1 = nn.Linear(input_size, hidden_size)\n        self.fc2 = nn.Linear(hidden_size, output_size)\n    \n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\n# Training function\ndef train_model(hidden_size, epochs=100, learning_rate=0.001):\n    model = NeuralNet(X_train_tensor.shape[1], hidden_size, 1)\n    criterion = nn.MSELoss()\n    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n    \n    for epoch in range(epochs):\n        model.train()\n        optimizer.zero_grad()\n        outputs = model(X_train_tensor)\n        loss = criterion(outputs, y_train_tensor)\n        loss.backward()\n        optimizer.step()\n    \n    model.eval()\n    with torch.no_grad():\n        y_pred_tensor = model(X_test_tensor)\n        y_pred = y_pred_tensor.numpy()\n    \n    return y_pred\n\n# Define hyperparameters\nhidden_sizes = [50, 100, 150]\nlearning_rates = [0.001, 0.01]\n\nbest_rmse = float('inf')\nbest_params = {}\n\n# Hyperparameter tuning\nfor hidden_size in hidden_sizes:\n    for lr in learning_rates:\n        y_pred = train_model(hidden_size, learning_rate=lr)\n        \n        # Calculate evaluation metrics\n        mse = mean_squared_error(y_test_tensor.numpy(), y_pred)\n        rmse = np.sqrt(mse)\n        r2 = r2_score(y_test_tensor.numpy(), y_pred)\n        mae = mean_absolute_error(y_test_tensor.numpy(), y_pred)\n        \n        if rmse < best_rmse:\n            best_rmse = rmse\n            best_params = {'hidden_size': hidden_size, 'learning_rate': lr}\n        \n        print(f\"\\nPyTorch Neural Network - Hidden Size: {hidden_size}, Learning Rate: {lr}\")\n        print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n        print(f\"Root Mean Squared Error (RMSE): {rmse:.2f}\")\n        print(f\"R^2 Score: {r2:.2f}\")\n        print(f\"Mean Absolute Error (MAE): {mae:.2f}\")\n\nprint(f\"\\nBest PyTorch Neural Network Hyperparameters: {best_params}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T08:15:27.365537Z","iopub.execute_input":"2024-09-18T08:15:27.366229Z","iopub.status.idle":"2024-09-18T08:16:43.547753Z","shell.execute_reply.started":"2024-09-18T08:15:27.366185Z","shell.execute_reply":"2024-09-18T08:16:43.546345Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"\nPyTorch Neural Network - Hidden Size: 50, Learning Rate: 0.001\nMean Squared Error (MSE): 63.87\nRoot Mean Squared Error (RMSE): 7.99\nR^2 Score: -96.30\nMean Absolute Error (MAE): 7.86\n\nPyTorch Neural Network - Hidden Size: 50, Learning Rate: 0.01\nMean Squared Error (MSE): 0.70\nRoot Mean Squared Error (RMSE): 0.84\nR^2 Score: -0.07\nMean Absolute Error (MAE): 0.65\n\nPyTorch Neural Network - Hidden Size: 100, Learning Rate: 0.001\nMean Squared Error (MSE): 52.09\nRoot Mean Squared Error (RMSE): 7.22\nR^2 Score: -78.36\nMean Absolute Error (MAE): 7.05\n\nPyTorch Neural Network - Hidden Size: 100, Learning Rate: 0.01\nMean Squared Error (MSE): 0.41\nRoot Mean Squared Error (RMSE): 0.64\nR^2 Score: 0.38\nMean Absolute Error (MAE): 0.48\n\nPyTorch Neural Network - Hidden Size: 150, Learning Rate: 0.001\nMean Squared Error (MSE): 30.76\nRoot Mean Squared Error (RMSE): 5.55\nR^2 Score: -45.86\nMean Absolute Error (MAE): 5.31\n\nPyTorch Neural Network - Hidden Size: 150, Learning Rate: 0.01\nMean Squared Error (MSE): 0.39\nRoot Mean Squared Error (RMSE): 0.63\nR^2 Score: 0.40\nMean Absolute Error (MAE): 0.48\n\nBest PyTorch Neural Network Hyperparameters: {'hidden_size': 150, 'learning_rate': 0.01}\n","output_type":"stream"}]},{"cell_type":"code","source":"test_df = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv')\ntest_df","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:22:32.821474Z","iopub.execute_input":"2024-09-19T09:22:32.822283Z","iopub.status.idle":"2024-09-19T09:22:33.176623Z","shell.execute_reply.started":"2024-09-19T09:22:32.822243Z","shell.execute_reply":"2024-09-19T09:22:33.175620Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"            id          brand                   model  model_year  milage  \\\n0       188533           Land          Rover LR2 Base        2015   98000   \n1       188534           Land       Rover Defender SE        2020    9142   \n2       188535           Ford      Expedition Limited        2022   28121   \n3       188536           Audi           A6 2.0T Sport        2016   61258   \n4       188537           Audi    A6 2.0T Premium Plus        2018   59000   \n...        ...            ...                     ...         ...     ...   \n125685  314218  Mercedes-Benz  GL-Class GL 450 4MATIC        2014   83315   \n125686  314219           Audi          Q7 55 Prestige        2019   29336   \n125687  314220           Audi    A6 3.0T Premium Plus        2012   77634   \n125688  314221           Audi         Q7 3.0T Premium        2012  112000   \n125689  314222      Chevrolet                Tahoe LT        2018   66840   \n\n       fuel_type                                             engine  \\\n0       Gasoline       240.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n1         Hybrid  395.0HP 3.0L Straight 6 Cylinder Engine Gasoli...   \n2       Gasoline                    3.5L V6 24V PDI DOHC Twin Turbo   \n3       Gasoline                                     2.0 Liter TFSI   \n4       Gasoline       252.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n...          ...                                                ...   \n125685  Gasoline      362.0HP 3.0L V6 Cylinder Engine Gasoline Fuel   \n125686  Gasoline                                    3.0 Liter Turbo   \n125687  Gasoline      333.0HP 3.0L V6 Cylinder Engine Gasoline Fuel   \n125688  Gasoline      333.0HP 3.0L V6 Cylinder Engine Gasoline Fuel   \n125689  Gasoline       355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel   \n\n              transmission          ext_col int_col       accident clean_title  \n0              6-Speed A/T            White   Beige  None reported         Yes  \n1              8-Speed A/T           Silver   Black  None reported         Yes  \n2       10-Speed Automatic            White   Ebony  None reported         NaN  \n3                Automatic  Silician Yellow   Black  None reported         NaN  \n4                      A/T             Gray   Black  None reported         Yes  \n...                    ...              ...     ...            ...         ...  \n125685         7-Speed A/T            Black   Black  None reported         Yes  \n125686           Automatic            White   Black  None reported         NaN  \n125687                 A/T            Black   Black  None reported         Yes  \n125688                 A/T            Black   Black  None reported         Yes  \n125689                 A/T           Silver   Black  None reported         Yes  \n\n[125690 rows x 12 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>brand</th>\n      <th>model</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>fuel_type</th>\n      <th>engine</th>\n      <th>transmission</th>\n      <th>ext_col</th>\n      <th>int_col</th>\n      <th>accident</th>\n      <th>clean_title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>188533</td>\n      <td>Land</td>\n      <td>Rover LR2 Base</td>\n      <td>2015</td>\n      <td>98000</td>\n      <td>Gasoline</td>\n      <td>240.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>6-Speed A/T</td>\n      <td>White</td>\n      <td>Beige</td>\n      <td>None reported</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>188534</td>\n      <td>Land</td>\n      <td>Rover Defender SE</td>\n      <td>2020</td>\n      <td>9142</td>\n      <td>Hybrid</td>\n      <td>395.0HP 3.0L Straight 6 Cylinder Engine Gasoli...</td>\n      <td>8-Speed A/T</td>\n      <td>Silver</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>188535</td>\n      <td>Ford</td>\n      <td>Expedition Limited</td>\n      <td>2022</td>\n      <td>28121</td>\n      <td>Gasoline</td>\n      <td>3.5L V6 24V PDI DOHC Twin Turbo</td>\n      <td>10-Speed Automatic</td>\n      <td>White</td>\n      <td>Ebony</td>\n      <td>None reported</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>188536</td>\n      <td>Audi</td>\n      <td>A6 2.0T Sport</td>\n      <td>2016</td>\n      <td>61258</td>\n      <td>Gasoline</td>\n      <td>2.0 Liter TFSI</td>\n      <td>Automatic</td>\n      <td>Silician Yellow</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>188537</td>\n      <td>Audi</td>\n      <td>A6 2.0T Premium Plus</td>\n      <td>2018</td>\n      <td>59000</td>\n      <td>Gasoline</td>\n      <td>252.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Gray</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>125685</th>\n      <td>314218</td>\n      <td>Mercedes-Benz</td>\n      <td>GL-Class GL 450 4MATIC</td>\n      <td>2014</td>\n      <td>83315</td>\n      <td>Gasoline</td>\n      <td>362.0HP 3.0L V6 Cylinder Engine Gasoline Fuel</td>\n      <td>7-Speed A/T</td>\n      <td>Black</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>125686</th>\n      <td>314219</td>\n      <td>Audi</td>\n      <td>Q7 55 Prestige</td>\n      <td>2019</td>\n      <td>29336</td>\n      <td>Gasoline</td>\n      <td>3.0 Liter Turbo</td>\n      <td>Automatic</td>\n      <td>White</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>125687</th>\n      <td>314220</td>\n      <td>Audi</td>\n      <td>A6 3.0T Premium Plus</td>\n      <td>2012</td>\n      <td>77634</td>\n      <td>Gasoline</td>\n      <td>333.0HP 3.0L V6 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Black</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>125688</th>\n      <td>314221</td>\n      <td>Audi</td>\n      <td>Q7 3.0T Premium</td>\n      <td>2012</td>\n      <td>112000</td>\n      <td>Gasoline</td>\n      <td>333.0HP 3.0L V6 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Black</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>125689</th>\n      <td>314222</td>\n      <td>Chevrolet</td>\n      <td>Tahoe LT</td>\n      <td>2018</td>\n      <td>66840</td>\n      <td>Gasoline</td>\n      <td>355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Silver</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n    </tr>\n  </tbody>\n</table>\n<p>125690 rows × 12 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Correct replacement for test_df\ntest_df.loc[test_df['fuel_type'].isnull(), 'fuel_type'] = 'electricity'\ntest_df.loc[test_df['accident'].isnull(), 'accident'] = 'At least 1 accident or damage reported'\ntest_df.loc[test_df['clean_title'].isnull(), 'clean_title'] = 'no'","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:22:35.733023Z","iopub.execute_input":"2024-09-19T09:22:35.733884Z","iopub.status.idle":"2024-09-19T09:22:35.776265Z","shell.execute_reply.started":"2024-09-19T09:22:35.733844Z","shell.execute_reply":"2024-09-19T09:22:35.775577Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"test_df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:22:38.357388Z","iopub.execute_input":"2024-09-19T09:22:38.358074Z","iopub.status.idle":"2024-09-19T09:22:38.467655Z","shell.execute_reply.started":"2024-09-19T09:22:38.358032Z","shell.execute_reply":"2024-09-19T09:22:38.466487Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"id              0\nbrand           0\nmodel           0\nmodel_year      0\nmilage          0\nfuel_type       0\nengine          0\ntransmission    0\next_col         0\nint_col         0\naccident        0\nclean_title     0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# Function to transform with handling unseen labels\ndef safe_transform(column, le):\n    # Map unseen labels to -1\n    return column.apply(lambda x: le.transform([x])[0] if x in le.classes_ else -1)","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:22:42.036022Z","iopub.execute_input":"2024-09-19T09:22:42.036885Z","iopub.status.idle":"2024-09-19T09:22:42.041827Z","shell.execute_reply.started":"2024-09-19T09:22:42.036841Z","shell.execute_reply":"2024-09-19T09:22:42.040740Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n# Apply the same label encoding to the test data\nprint(\"Applying label encoding to test data...\")\nfor column, le in label_encoders.items():\n    if column in test_df.columns:\n        test_df[column] = safe_transform(test_df[column].astype(str), le)\n        print(f\"Transformed column: {column}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:22:44.597660Z","iopub.execute_input":"2024-09-19T09:22:44.598311Z","iopub.status.idle":"2024-09-19T09:30:27.205156Z","shell.execute_reply.started":"2024-09-19T09:22:44.598266Z","shell.execute_reply":"2024-09-19T09:30:27.204157Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Applying label encoding to test data...\nTransformed column: brand\nTransformed column: model\nTransformed column: fuel_type\nTransformed column: engine\nTransformed column: transmission\nTransformed column: ext_col\nTransformed column: int_col\nTransformed column: accident\nTransformed column: clean_title\n","output_type":"stream"}]},{"cell_type":"code","source":"test_dft = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:30:27.206775Z","iopub.execute_input":"2024-09-19T09:30:27.207088Z","iopub.status.idle":"2024-09-19T09:30:27.543466Z","shell.execute_reply.started":"2024-09-19T09:30:27.207056Z","shell.execute_reply":"2024-09-19T09:30:27.542637Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"# Check if 'id' column exists before saving it\nif 'id' in test_dft.columns:\n    test_ids = test_dft['id']\n    print(\"'id' column found and saved.\")\nelse:\n    print(\"'id' column not found. Skipping saving the 'id' column.\")\n\n# Check for remaining missing values in the test data\nmissing_columns = test_df.columns[test_df.isnull().any()].tolist()\nif missing_columns:\n    print(f\"Warning: The following columns still have missing values: {missing_columns}\")\n    # Optionally, fill remaining missing values with mean, median, or a constant\n    test_df.fillna(test_df.mean(), inplace=True)\n    print(\"Remaining missing values have been filled.\")\n\n# Drop the columns that are not used for prediction\ncolumns_to_drop = ['brand', 'model', 'transmission', 'id', 'ext_col', 'int_col']\nexisting_columns_to_drop = [col for col in columns_to_drop if col in test_df.columns]\n\nif existing_columns_to_drop:\n    print(f\"Dropping columns: {existing_columns_to_drop}\")\n    test_df.drop(columns=existing_columns_to_drop, inplace=True)\nelse:\n    print(\"No columns to drop.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:30:27.544750Z","iopub.execute_input":"2024-09-19T09:30:27.545069Z","iopub.status.idle":"2024-09-19T09:30:27.559103Z","shell.execute_reply.started":"2024-09-19T09:30:27.545035Z","shell.execute_reply":"2024-09-19T09:30:27.558067Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"'id' column found and saved.\nDropping columns: ['brand', 'model', 'transmission', 'id', 'ext_col', 'int_col']\n","output_type":"stream"}]},{"cell_type":"code","source":"# Standardize the test features\ntest_df_scaled = scaler.transform(test_df)\n\n# Predict on the test data (log-transformed prices)\npredictions_log = best_model_gbr.predict(test_df_scaled)\n\n# Convert predictions back to the original scale\npredictions_original = np.expm1(predictions_log)\n\n# Check the shapes\nprint(f\"Length of test_ids: {len(test_ids)}\")\nprint(f\"Length of predictions: {len(predictions_original)}\")\n\n# Prepare the submission file using the saved 'id' values\nsubmission = pd.DataFrame({'id': test_ids, 'price': predictions_original})\nsubmission.to_csv('submission_gbr.csv', index=False)\nprint(\"Submission file created successfully.\")","metadata":{"execution":{"iopub.status.busy":"2024-09-19T09:30:27.561366Z","iopub.execute_input":"2024-09-19T09:30:27.562193Z","iopub.status.idle":"2024-09-19T09:30:28.502702Z","shell.execute_reply.started":"2024-09-19T09:30:27.562134Z","shell.execute_reply":"2024-09-19T09:30:28.501736Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"Length of test_ids: 125690\nLength of predictions: 125690\nSubmission file created successfully.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Standardize the test features\ntest_df_scaled = scaler.transform(test_df)\n\n# Predict on the test data\npredictions = best_model_knn_gpu.predict(test_df_scaled)\n\n# Check the shapes\nprint(f\"Length of test_ids: {len(test_ids)}\")\nprint(f\"Length of predictions: {len(predictions)}\")\n\n# Prepare the submission file using the saved 'id' values\nsubmission = pd.DataFrame({'id': test_ids, 'price': predictions})\nsubmission.to_csv('submissionrlr.csv', index=False)\nprint(\"Submission file created successfully.\")","metadata":{},"execution_count":null,"outputs":[]}]}